@inject NavigationManager NavigationManager

@if (Server is not null)
{
    <li @key="Server.ServerId" style="background-color: @GetBackgroundColour()">
      @Server.Name in @Server.City is 
      <span style="color: @(Server.IsOnline ? "green" : "red")">
        @(Server.IsOnline ? "online": "offline")
      </span>
      &nbsp;

      @if (Server.IsOnline)
      {
        <button type="button" class="btn btn-outline-danger"
          @onclick="@(() => Server.IsOnline = false )">Turn Off</button>
      }
      else
      {
        <button type="button" class="btn btn-outline-success"
           @onclick="@(() => Server.IsOnline = true )">Turn on</button>
      }
      
      &nbsp;

      @if (Server.IsOnline)
      {
        Random random = new Random();
        int randomNumber = random.Next(0, 500);
        <text>@randomNumber</text>
      }
      else
      {
        <text>N/A</text>
      }

      <a href="/servers/@Server.ServerId" class="btn btn-link">Edit</a>
      &nbsp;
      <EditForm
        Model="Server"
        FormName="@($"form-server-{Server.ServerId}")"
        OnValidSubmit="@(() => DeleteServer(Server.ServerId))">
        <button class="btn btn-primary" type="submit">Delete</button>
      </EditForm>
    </li>
}


@code {
  [Parameter]
  public Server? Server { get; set; }

  [CascadingParameter(Name = "SelectedCity")]
  public string? SelectedCity { get; set; }

  private void DeleteServer(int serverId)
  {
    if (serverId > 0)
    {
      ServersRepository.DeleteServer(serverId);
      @* servers= ServersRepository.GetServersByCity("Toronto"); *@
      NavigationManager.NavigateTo("/servers", true);
    }
  }

  private string GetBackgroundColour()
  {
    if (SelectedCity is null) return "white";

    switch (this.SelectedCity)
    {
      case "Toronto": return "powderblue";
      case "Montreal": return "lightgray";
      case "Ottawa": return "palegreen";
      case "Calgary": return "pink";
      default: return "white";
    }
  }
}